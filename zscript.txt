version "3.2.0"

class PistolStartEventHandler : StaticEventHandler
{
  /** resets health, armor, and droppable inventory items
   */
  void ResetInventory(PlayerPawn player)
  {
    // reset health and armor
    player.A_SetHealth(player.GetSpawnHealth());
    player.SetInventory("BasicArmor", 0);
    player.SetInventory("HexenArmor", 1);

    // remove everything that is droppable
    player.ClearInventory();

    // Restore default things
    DropItem drop = player.GetDropItems();
    if (drop != null)
    {
      for(DropItem di = drop; di != null; di=di.Next)
      {
        if(di.Name == 'None') { continue; }

        let weapon = (class<Weapon>)(di.Name);
        if (weapon != null) { continue; }

        let ammo = (class<Ammo>)(di.Name);
        if (ammo != null) { continue; }

        let inv = (class<Inventory>)(di.Name);

        if(inv != null)
        {
          player.A_SetInventory(di.Name, di.Amount);
        }
      }
    }
  }

  /** resets weapons, even if they are undroppable
   * ammo should be reset after resetting weapons.
   */
  void ResetWeapons(PlayerPawn player)
  {
    DropItem drop = player.GetDropItems();

    // remove weapons even if they are undroppable
    // removing an item invalidates the iterator, so
    // 1. remember weapon classes
    Array<string> weapons;
    for (let item = player.Inv; item; item = item.Inv)
    {
      if (item is "Weapon") { weapons.push(item.GetClassName()); }
    }

    // 2. Remove remembered weapon clasess
    int size = weapons.Size();
    for (int i = 0; i < size; ++i)
    {
      player.A_TakeInventory(weapons[i]);
    }

    // If the player has any weapons in StartItem, set them here
    string lastStartWeapon = ""; // to set default weapon
    if (drop != null)
    {
      for(DropItem di = drop; di != null; di=di.Next)
      {
        if(di.Name == 'None') { continue; }

        let weptype = (class<weapon>)(di.Name);

        if(weptype != null)
        {
          lastStartWeapon = di.Name;
          player.A_SetInventory(di.Name, di.Amount);
        }
      }
    }
    if (lastStartWeapon != "")
    {
      let weaponInInv = player.FindInventory(lastStartWeapon);
      player.UseInventory(weaponInInv);
    }
  }

  void ResetAmmo(PlayerPawn player)
  {
    DropItem drop = player.GetDropItems();

    // Remove all ammo, except that with the UNDROPPABLE flag
    // 1. Remember ammo classes
    Array<string> ammos;
    for (let item = player.Inv; item; item = item.Inv)
    {
      if(item is "Ammo") { ammos.Push(item.GetClassName()); }
    }
    // 2. Remove
    int size = ammos.Size();
    for (int i = 0; i < size; ++i)
    {
      player.A_TakeInventory(ammos[i]);
    }

    //If the player has any ammo in StartItem, set it here
    if (drop != null)
    {
      for(DropItem di = drop; di != null; di = di.Next)
      {
        if (di.Name == 'None') { continue; }

        let ammotype = (class<ammo>)(di.Name);
        if (ammotype != null)
        {
          player.A_SetInventory(di.Name,di.Amount);
        }
      }
    }
  }

  override void PlayerEntered(PlayerEvent e)
  {
    CVar pistolStartCvar = CVar.FindCVar("m8f_wm_PistolStart");
    bool pistolStart = pistolStartCvar.GetInt();
    if (!pistolStart) { return; }

    let player = PlayerPawn(players[e.PlayerNumber].mo);
    ResetInventory(player);
    ResetWeapons(player);
    ResetAmmo(player);
  }
}
